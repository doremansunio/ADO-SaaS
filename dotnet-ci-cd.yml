# File: PlatformAutomation/templates/dotnet-ci-cd.yml
# This template defines the common CI/CD stages for .NET applications.

parameters:
- name: appName
  type: string
- name: repoName
  type: string
- name: solutionPath
  type: string
- name: testProjectPath
  type: string
- name: techStack
  type: string
- name: azureSubscriptionServiceConnection
  type: string
- name: agentPoolName
  type: string
- name: containerRegistryServiceConnection
  type: string
  default: '' # Optional, only if using container builds
- name: enableCI
  type: boolean
  default: true
- name: enableCD
  type: boolean
  default: true

# Environment-specific parameters
- name: devDeploymentType
  type: string
  default: 'none'
- name: devAppServiceName
  type: string
  default: ''
- name: devResourceGroupName
  type: string
  default: ''
- name: devAppUrlForTests
  type: string
  default: ''
- name: devAppServerName
  type: string
  default: ''
- name: devWinRmServiceConnection
  type: string
  default: ''
- name: devRemotePath
  type: string
  default: ''
- name: devK8sImageName
  type: string
  default: ''
- name: devK8sNamespace
  type: string
  default: ''
- name: devK8sDeploymentName
  type: string
  default: ''
- name: devK8sServiceConnection
  type: string
  default: ''
- name: devK8sContainerPort
  type: number
  default: 80

- name: qaDeploymentType
  type: string
  default: 'none'
- name: qaAppServiceName
  type: string
  default: ''
- name: qaResourceGroupName
  type: string
  default: ''
- name: qaAppUrlForTests
  type: string
  default: ''
- name: qaAppServerName
  type: string
  default: ''
- name: qaWinRmServiceConnection
  type: string
  default: ''
- name: qaRemotePath
  type: string
  default: ''
- name: qaK8sImageName
  type: string
  default: ''
- name: qaK8sNamespace
  type: string
  default: ''
- name: qaK8sDeploymentName
  type: string
  default: ''
- name: qaK8sServiceConnection
  type: string
  default: ''
- name: qaK8sContainerPort
  type: number
  default: 80

- name: prodDeploymentType
  type: string
  default: 'none'
- name: prodAppServiceName
  type: string
  default: ''
- name: prodResourceGroupName
  type: string
  default: ''
- name: prodAppUrlForTests
  type: string
  default: ''
- name: prodAppServerName
  type: string
  default: ''
- name: prodWinRmServiceConnection
  type: string
  default: ''
- name: prodRemotePath
  type: string
  default: ''
- name: prodK8sImageName
  type: string
  default: ''
- name: prodK8sNamespace
  type: string
  default: ''
- name: prodK8sDeploymentName
  type: string
  default: ''
- name: prodK8sServiceConnection
  type: string
  default: ''
- name: prodK8sContainerPort
  type: number
  default: 80

stages:
- stage: Build
  displayName: 'CI - Build & Test'
  condition: ${{ parameters.enableCI }}
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test .NET App'
    pool:
      name: ${{ parameters.agentPoolName }}
    steps:
    - task: PowerShell@2
      displayName: 'Read Dynamic Variables from params.json'
      inputs:
        targetType: 'inline'
        script: |
          $jsonPath = "$(Build.SourcesDirectory)/config/params.json"
          if (Test-Path $jsonPath) {
              Write-Host "Reading variables from $jsonPath"
              $jsonContent = Get-Content $jsonPath | ConvertFrom-Json

              if ($jsonContent.ContainsKey('buildConfiguration')) {
                  $buildConfig = $jsonContent.buildConfiguration
                  Write-Host "##vso[task.setvariable variable=buildConfiguration]$buildConfig"
                  Write-Host "Set pipeline variable 'buildConfiguration' to: $buildConfig"
              } else {
                  Write-Warning "Key 'buildConfiguration' not found. Defaulting to 'Release'."
                  Write-Host "##vso[task.setvariable variable=buildConfiguration]Release"
              }

              if ($jsonContent.ContainsKey('appEnvironment')) {
                  $envValue = $jsonContent.appEnvironment
                  Write-Host "##vso[task.setvariable variable=appEnvironment]$envValue"
                  Write-Host "Set pipeline variable 'appEnvironment' to: $envValue"
              }
          } else {
              Write-Error "params.json not found at $jsonPath. Cannot load dynamic variables."
              exit 1
          }
      name: setDynamicVariables # Name for this step for referencing outputs if needed.

    - template: shared/dotnet-build.yml@platform_templates # Use shared build template
      parameters:
        solutionPath: ${{ parameters.solutionPath }}
        buildConfiguration: '$(buildConfiguration)' # Use variable set from params.json
        appName: ${{ parameters.appName }}
        containerRegistryServiceConnection: ${{ parameters.containerRegistryServiceConnection }}

    - template: shared/dotnet-test.yml@platform_templates # Use shared test template
      parameters:
        testProjectPath: ${{ parameters.testProjectPath }}
        buildConfiguration: '$(buildConfiguration)' # Use variable set from params.json
        appName: ${{ parameters.appName }}

    - publish: $(Build.ArtifactStagingDirectory)/BackendWebApp.zip # Publish web app artifact
      artifact: BackendWebApp
      displayName: 'Publish Web App Artifact'
      condition: and(succeeded(), eq('${{ parameters.techStack }}', 'dotnet'))

- stage: DeployToDev
  displayName: 'CD - Deploy to DEV'
  dependsOn: Build
  condition: and(succeeded(), eq('${{ parameters.enableCD }}', true), ne('${{ parameters.devDeploymentType }}', 'none'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to DEV Environment'
    environment: dev # Link to Azure DevOps Environment
    pool:
      name: ${{ parameters.agentPoolName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BackendWebApp
            displayName: 'Download Web App Artifact'

          - template: shared/deploy-app.yml@platform_templates # Use shared deployment template
            parameters:
              environmentName: 'dev'
              deploymentType: ${{ parameters.devDeploymentType }}
              appServiceName: ${{ parameters.devAppServiceName }}
              resourceGroupName: ${{ parameters.devResourceGroupName }}
              azureSubscriptionServiceConnection: ${{ parameters.azureSubscriptionServiceConnection }}
              appUrlForTests: ${{ parameters.devAppUrlForTests }}
              appServerName: ${{ parameters.devAppServerName }}
              winRmServiceConnection: ${{ parameters.devWinRmServiceConnection }}
              remotePath: ${{ parameters.devRemotePath }}
              k8sImageName: ${{ parameters.devK8sImageName }}
              k8sNamespace: ${{ parameters.devK8sNamespace }}
              k8sDeploymentName: ${{ parameters.devK8sDeploymentName }}
              k8sServiceConnection: ${{ parameters.devK8sServiceConnection }}
              k8sContainerPort: ${{ parameters.devK8sContainerPort }}

- stage: DeployToQA
  displayName: 'CD - Deploy to QA'
  dependsOn: DeployToDev
  condition: and(succeeded(), eq('${{ parameters.enableCD }}', true), ne('${{ parameters.qaDeploymentType }}', 'none'))
  jobs:
  - deployment: DeployQA
    displayName: 'Deploy to QA Environment'
    environment: qa # Link to Azure DevOps Environment
    pool:
      name: ${{ parameters.agentPoolName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BackendWebApp
            displayName: 'Download Web App Artifact'

          - template: shared/deploy-app.yml@platform_templates # Use shared deployment template
            parameters:
              environmentName: 'qa'
              deploymentType: ${{ parameters.qaDeploymentType }}
              appServiceName: ${{ parameters.qaAppServiceName }}
              resourceGroupName: ${{ parameters.qaResourceGroupName }}
              azureSubscriptionServiceConnection: ${{ parameters.azureSubscriptionServiceConnection }}
              appUrlForTests: ${{ parameters.qaAppUrlForTests }}
              appServerName: ${{ parameters.qaAppServerName }}
              winRmServiceConnection: ${{ parameters.qaWinRmServiceConnection }}
              remotePath: ${{ parameters.qaRemotePath }}
              k8sImageName: ${{ parameters.qaK8sImageName }}
              k8sNamespace: ${{ parameters.qaK8sNamespace }}
              k8sDeploymentName: ${{ parameters.qaK8sDeploymentName }}
              k8sServiceConnection: ${{ parameters.qaK8sServiceConnection }}
              k8sContainerPort: ${{ parameters.qaK8sContainerPort }}

- stage: DeployToProd
  displayName: 'CD - Deploy to PROD'
  dependsOn: DeployToQA # Depends on QA for sequential deployment
  condition: and(succeeded(), eq('${{ parameters.enableCD }}', true), ne('${{ parameters.prodDeploymentType }}', 'none'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to PROD Environment'
    environment: prod # Link to Azure DevOps Environment
    pool:
      name: ${{ parameters.agentPoolName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BackendWebApp
            displayName: 'Download Web App Artifact'

          - template: shared/deploy-app.yml@platform_templates # Use shared deployment template
            parameters:
              environmentName: 'prod'
              deploymentType: ${{ parameters.prodDeploymentType }}
              appServiceName: ${{ parameters.prodAppServiceName }}
              resourceGroupName: ${{ parameters.prodResourceGroupName }}
              azureSubscriptionServiceConnection: ${{ parameters.azureSubscriptionServiceConnection }}
              appUrlForTests: ${{ parameters.prodAppUrlForTests }}
              appServerName: ${{ parameters.prodAppServerName }}
              winRmServiceConnection: ${{ parameters.prodWinRmServiceConnection }}
              remotePath: ${{ parameters.prodRemotePath }}
              k8sImageName: ${{ parameters.prodK8sImageName }}
              k8sNamespace: ${{ parameters.prodK8sNamespace }}
              k8sDeploymentName: ${{ parameters.prodK8sDeploymentName }}
              k8sServiceConnection: ${{ parameters.prodK8sServiceConnection }}
              k8sContainerPort: ${{ parameters.prodK8sContainerPort }}