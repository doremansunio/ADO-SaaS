# File: PlatformAutomation/templates/dotnet-ci-cd.yml
#
# This is the standard, extensible CI/CD template for .NET applications.
# It defines the common build, test, and deployment stages.
# This template is extended by application-specific pipelines generated by the meta-pipeline.

parameters:
# Required application-specific details passed from the extending pipeline.
- name: appName
  type: string
  displayName: 'Application Name'
- name: solutionPath
  type: string
  displayName: 'Path to .NET Solution File (e.g., src/MyWebApp/MyWebApp.sln)'
- name: testProjectPath
  type: string
  displayName: 'Path to .NET Test Project (e.g., src/MyWebApp.Tests/MyWebApp.Tests.csproj)'
- name: techStack
  type: string
  displayName: 'Technology Stack (e.g., DotNet, Java, Node.js)'
- name: buildTool
  type: string
  displayName: 'Build and Unit Test Tool (e.g., DotNetCLI, Maven, Npm)'
- name: azureSubscriptionServiceConnection
  type: string
  displayName: 'Azure Service Connection Name'
- name: agentPoolName
  type: string
  displayName: 'Agent Pool Name'
  default: 'Azure Pipelines' # Default agent pool to use for all jobs in this pipeline.

# Control parameters for CI/CD stage execution.
- name: enableCI
  type: boolean
  default: true # Default: CI (Build & Test) stage is enabled.
- name: enableCD
  type: boolean
  default: false # Default: CD (Deployment) stages are disabled.
                 # Applications can manually change this to 'true' in their generated YAML to enable deployments.

# Environment-specific deployment parameters (passed from the extending pipeline).
# These are extracted from the single enabled deployment option in the app's config JSON.
- name: devAppUrlForTests
  type: string
- name: devDeploymentType # e.g., azureWebApp, onPremiseFCI, openShift
  type: string
- name: devAppServiceName
  type: string
  default: ''
- name: devTargetOS # For AzureWebApp (Linux/Windows)
  type: string
  default: ''
- name: devAppServicePlanName # For AzureAppServiceEnvironment
  type: string
  default: ''
- name: devAppServerName # For OnPremiseFCI
  type: string
  default: ''
- name: devWinRmServiceConnection # For OnPremiseFCI
  type: string
  default: ''
- name: devSshServiceConnection # For OnPremiseLinuxSSH
  type: string
  default: ''
- name: devRemotePath # For OnPremiseFCI, OnPremiseLinuxSSH
  type: string
  default: ''
- name: devK8sServiceConnection # For OpenShift
  type: string
  default: ''
- name: devK8sNamespace # For OpenShift
  type: string
  default: ''
- name: devImageName # For OpenShift
  type: string
  default: ''
- name: devImageTag # For OpenShift
  type: string
  default: ''

- name: qaAppUrlForTests
  type: string
- name: qaDeploymentType
  type: string
  default: ''
- name: qaAppServiceName
  type: string
  default: ''
- name: qaTargetOS
  type: string
  default: ''
- name: qaAppServicePlanName
  type: string
  default: ''
- name: qaAppServerName
  type: string
  default: ''
- name: qaWinRmServiceConnection
  type: string
  default: ''
- name: qaSshServiceConnection
  type: string
  default: ''
- name: qaRemotePath
  type: string
  default: ''
- name: qaK8sServiceConnection
  type: string
  default: ''
- name: qaK8sNamespace
  type: string
  default: ''
- name: qaImageName
  type: string
  default: ''
- name: qaImageTag
  type: string
  default: ''

- name: prodAppUrlForTests
  type: string
- name: prodDeploymentType
  type: string
- name: prodAppServiceName
  type: string
  default: ''
- name: prodTargetOS
  type: string
  default: ''
- name: prodAppServicePlanName
  type: string
  default: ''
- name: prodAppServerName
  type: string
  default: ''
- name: prodWinRmServiceConnection
  type: string
  default: ''
- name: prodSshServiceConnection
  type: string
  default: ''
- name: prodRemotePath
  type: string
  default: ''
- name: prodK8sServiceConnection
  type: string
  default: ''
- name: prodK8sNamespace
  type: string
  default: ''
- name: prodImageName
  type: string
  default: ''
- name: prodImageTag
  type: string
  default: ''

variables:
  # Common variables used across stages.
  buildPlatform: 'Any CPU' # Standard build platform for .NET projects.
  dotNetArtifactPath: '$(Build.ArtifactStagingDirectory)/BackendWebApp' # Path where compiled artifacts are staged.

resources:
  # Resource definition for this pipeline (points to the application's own repository).
  repositories:
    - repository: self
      type: git
      name: $(Build.Repository.Name)
      ref: main

pool:
  # Agent pool to use for jobs within this pipeline.
  name: ${{ parameters.agentPoolName }}

stages:
# --------------------------------------------------------------------------------------
# CI Stage: Build & Test
# This stage compiles the application, runs unit tests, and publishes build artifacts.
# --------------------------------------------------------------------------------------
- stage: Build
  displayName: 'CI - Build & Test'
  # Condition: Only execute this stage if 'enableCI' parameter is true.
  condition: ${{ parameters.enableCI }}
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test .NET App'
    steps:
    - task: PowerShell@2
      displayName: 'Read Dynamic Variables from params.json'
      inputs:
        targetType: 'inline'
        script: |
          # Reads a dynamically generated JSON file (created by the meta-pipeline)
          # to set additional variables like buildConfiguration or appEnvironment.
          $jsonPath = "$(Build.SourcesDirectory)/config/params.json"
          if (Test-Path $jsonPath) {
              Write-Host "Reading variables from $jsonPath"
              $jsonContent = Get-Content $jsonPath | ConvertFrom-Json

              if ($jsonContent.ContainsKey('buildConfiguration')) {
                  $buildConfig = $jsonContent.buildConfiguration
                  Write-Host "##vso[task.setvariable variable=buildConfiguration]$buildConfig"
                  Write-Host "Set pipeline variable 'buildConfiguration' to: $buildConfig"
              } else {
                  Write-Warning "Key 'buildConfiguration' not found. Defaulting to 'Release'."
                  Write-Host "##vso[task.setvariable variable=buildConfiguration]Release"
              }

              if ($jsonContent.ContainsKey('environment')) {
                  $envValue = $jsonContent.environment
                  Write-Host "##vso[task.setvariable variable=appEnvironment]$envValue"
                  Write-Host "Set pipeline variable 'appEnvironment' to: $envValue"
              }
          } else {
              Write-Error "params.json not found at $jsonPath. Cannot load dynamic variables."
              exit 1
          }
      name: setDynamicVariables # Name for this step for referencing outputs if needed.

    # --- Build .NET Backend ---
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 6.x'
      inputs:
        version: '6.x' # Specifies the .NET SDK version to use.

    - template: shared/nuget-restore.yml@self # Template for NuGet package restoration.
      parameters:
        solution: ${{ parameters.solutionPath }}

    - template: shared/dotnet-build.yml@self # Template for .NET project build.
      parameters:
        solution: ${{ parameters.solutionPath }}
        configuration: '$(buildConfiguration)'
        platform: '$(buildPlatform)'

    - task: DotNetCoreCLI@2
      displayName: 'Run .NET Unit Tests'
      inputs:
        command: 'test'
        projects: ${{ parameters.testProjectPath }} # Path to the test project.
        arguments: '--configuration $(buildConfiguration) --no-build --no-restore --logger trx --results-directory $(Build.ArtifactStagingDirectory)/TestResults'

    - task: PublishTestResults@2
      displayName: 'Publish .NET Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/**/*.trx'
        mergeTestResults: true
        failTaskOnFailedTests: true # Fail the task if any tests fail.

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Backend Artifact'
      inputs:
        command: 'publish'
        publishWebProjects: true # Specifies that web projects should be published.
        projects: ${{ parameters.solutionPath }}
        arguments: '--configuration $(buildConfiguration) --output $(dotNetArtifactPath)'
        zipAfterPublish: false # Do not zip the output, publish raw files.

    - publish: $(dotNetArtifactPath)
      artifact: BackendWebApp
      displayName: 'Publish Backend WebApp Artifact' # Publish the build output as a pipeline artifact.

    - template: shared/kpi-registration-build.yml@self # Template for registering build-related KPIs.
      parameters:
        appName: ${{ parameters.appName }}
        repoName: '$(Build.Repository.Name)'
        projectPath: '$(Build.SourcesDirectory)'

# --------------------------------------------------------------------------------------
# CD Stage: Deploy to Development Environment
# This stage deploys the application to the configured Development target.
# --------------------------------------------------------------------------------------
- stage: DeployToDev
  displayName: 'CD - Deploy to Development'
  dependsOn: Build # This stage depends on the successful completion of the Build stage.
  # Condition: Only execute if Build succeeded, CD is enabled, AND a deployment type is defined for Dev.
  condition: and(succeeded('Build'), ${{ parameters.enableCD }}, ne(variables['devDeploymentType'], 'none'))
  jobs:
  - deployment: DeployDevApp
    displayName: 'Deploy App to Dev'
    environment: 'Dev.WebApp' # Azure DevOps environment for Dev deployments.
    variables:
      # Map all dev-specific parameters to job-scoped variables for use in deployment steps.
      - name: AppUrlForTests
        value: ${{ parameters.devAppUrlForTests }}
      - name: DeploymentType
        value: ${{ parameters.devDeploymentType }}
      - name: AppServiceName
        value: ${{ parameters.devAppServiceName }}
      - name: TargetOS
        value: ${{ parameters.devTargetOS }}
      - name: AppServicePlanName
        value: ${{ parameters.devAppServicePlanName }}
      - name: AppServerName
        value: ${{ parameters.devAppServerName }}
      - name: WinRmServiceConnection
        value: ${{ parameters.devWinRmServiceConnection }}
      - name: SshServiceConnection
        value: ${{ parameters.devSshServiceConnection }}
      - name: RemotePath
        value: ${{ parameters.devRemotePath }}
      - name: K8sServiceConnection
        value: ${{ parameters.devK8sServiceConnection }}
      - name: K8sNamespace
        value: ${{ parameters.devK8sNamespace }}
      - name: ImageName
        value: ${{ parameters.devImageName }}
      - name: ImageTag
        value: ${{ parameters.devImageTag }}
    strategy:
      runOnce: # A simple deployment strategy to run steps once.
        deploy:
          steps:
          - download: current # Download artifacts from the current pipeline run.
            artifact: BackendWebApp

          - template: shared/deploy-app.yml@self # Reusable deployment logic template.
            parameters:
              environmentType: $(DeploymentType)
              azureSubscription: ${{ parameters.azureSubscriptionServiceConnection }}
              appServiceName: $(AppServiceName)
              targetOS: $(TargetOS)
              appServicePlanName: $(AppServicePlanName)
              appServerName: $(AppServerName)
              winRmServiceConnection: $(WinRmServiceConnection)
              sshServiceConnection: $(SshServiceConnection)
              remotePath: $(RemotePath)
              kubernetesServiceConnection: $(K8sServiceConnection)
              k8sNamespace: $(K8sNamespace)
              imageName: $(ImageName)
              imageTag: $(ImageTag)
              backendPackagePath: '$(Pipeline.Workspace)/BackendWebApp'
              appUrlForTests: $(AppUrlForTests)

          - template: shared/kpi-registration-deploy.yml@self # Template for registering deployment-related KPIs.
            parameters:
              appName: ${{ parameters.appName }}
              envName: 'Development'
              appServiceName: $(AppServiceName)

# --------------------------------------------------------------------------------------
# CD Stage: Deploy to QA Environment
# This stage deploys the application to the configured QA target.
# --------------------------------------------------------------------------------------
- stage: DeployToQA
  displayName: 'CD - Deploy to QA'
  dependsOn: DeployToDev # Depends on successful Dev deployment.
  # Condition: Only execute if Dev deployment succeeded, CD is enabled, AND a deployment type is defined for QA.
  condition: and(succeeded('DeployToDev'), ${{ parameters.enableCD }}, ne(variables['qaDeploymentType'], 'none'))
  jobs:
  - deployment: DeployQAApp
    displayName: 'Deploy App to QA'
    environment: 'QA.WebApp' # Azure DevOps environment for QA deployments.
    variables:
      # Map all qa-specific parameters to job-scoped variables.
      - name: AppUrlForTests
        value: ${{ parameters.qaAppUrlForTests }}
      - name: DeploymentType
        value: ${{ parameters.qaDeploymentType }}
      - name: AppServiceName
        value: ${{ parameters.qaAppServiceName }}
      - name: TargetOS
        value: ${{ parameters.qaTargetOS }}
      - name: AppServicePlanName
        value: ${{ parameters.qaAppServicePlanName }}
      - name: AppServerName
        value: ${{ parameters.qaAppServerName }}
      - name: WinRmServiceConnection
        value: ${{ parameters.qaWinRmServiceConnection }}
      - name: SshServiceConnection
        value: ${{ parameters.qaSshServiceConnection }}
      - name: RemotePath
        value: ${{ parameters.qaRemotePath }}
      - name: K8sServiceConnection
        value: ${{ parameters.qaK8sServiceConnection }}
      - name: K8sNamespace
        value: ${{ parameters.qaK8sNamespace }}
      - name: ImageName
        value: ${{ parameters.qaImageName }}
      - name: ImageTag
        value: ${{ parameters.qaImageTag }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BackendWebApp

          - template: shared/deploy-app.yml@self
            parameters:
              environmentType: $(DeploymentType)
              azureSubscription: ${{ parameters.azureSubscriptionServiceConnection }}
              appServiceName: $(AppServiceName)
              targetOS: $(TargetOS)
              appServicePlanName: $(AppServicePlanName)
              appServerName: $(AppServerName)
              winRmServiceConnection: $(WinRmServiceConnection)
              sshServiceConnection: $(SshServiceConnection)
              remotePath: $(RemotePath)
              kubernetesServiceConnection: $(K8sServiceConnection)
              k8sNamespace: $(K8sNamespace)
              imageName: $(ImageName)
              imageTag: $(ImageTag)
              backendPackagePath: '$(Pipeline.Workspace)/BackendWebApp'
              appUrlForTests: $(AppUrlForTests)

          - template: shared/kpi-registration-deploy.yml@self
            parameters:
              appName: ${{ parameters.appName }}
              envName: 'QA'
              appServiceName: $(AppServiceName)

# --------------------------------------------------------------------------------------
# CD Stage: Deploy to Production Environment
# This stage deploys the application to the configured Production target.
# --------------------------------------------------------------------------------------
- stage: DeployToProd
  displayName: 'CD - Deploy to Production'
  dependsOn: DeployToQA # Depends on successful QA deployment.
  # Condition: Only execute if QA deployment succeeded, CD is enabled,
  # on 'main' branch (typical for production), AND a deployment type is defined for Prod.
  condition: and(succeeded('DeployToQA'), ${{ parameters.enableCD }}, eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['prodDeploymentType'], 'none'))
  jobs:
  - deployment: DeployProdApp
    displayName: 'Deploy App to Prod'
    environment: 'Prod.WebApp' # Azure DevOps environment for Prod deployments.
    variables:
      # Map all prod-specific parameters to job-scoped variables.
      - name: AppUrlForTests
        value: ${{ parameters.prodAppUrlForTests }}
      - name: DeploymentType
        value: ${{ parameters.prodDeploymentType }}
      - name: AppServiceName
        value: ${{ parameters.prodAppServiceName }}
      - name: TargetOS
        value: ${{ parameters.prodTargetOS }}
      - name: AppServicePlanName
        value: ${{ parameters.prodAppServicePlanName }}
      - name: AppServerName
        value: ${{ parameters.prodAppServerName }}
      - name: WinRmServiceConnection
        value: ${{ parameters.prodWinRmServiceConnection }}
      - name: SshServiceConnection
        value: ${{ parameters.prodSshServiceConnection }}
      - name: RemotePath
        value: ${{ parameters.prodRemotePath }}
      - name: K8sServiceConnection
        value: ${{ parameters.prodK8sServiceConnection }}
      - name: K8sNamespace
        value: ${{ parameters.prodK8sNamespace }}
      - name: ImageName
        value: ${{ parameters.prodImageName }}
      - name: ImageTag
        value: ${{ parameters.prodImageTag }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BackendWebApp

          - template: shared/deploy-app.yml@self
            parameters:
              environmentType: $(DeploymentType)
              azureSubscription: ${{ parameters.azureSubscriptionServiceConnection }}
              appServiceName: $(AppServiceName)
              targetOS: $(TargetOS)
              appServicePlanName: $(AppServicePlanName)
              appServerName: $(AppServerName)
              winRmServiceConnection: $(WinRmServiceConnection)
              sshServiceConnection: $(SshServiceConnection)
              remotePath: $(RemotePath)
              kubernetesServiceConnection: $(K8sServiceConnection)
              k8sNamespace: $(K8sNamespace)
              imageName: $(ImageName)
              imageTag: $(ImageTag)
              backendPackagePath: '$(Pipeline.Workspace)/BackendWebApp'
              appUrlForTests: $(AppUrlForTests)

          - template: shared/kpi-registration-deploy.yml@self
            parameters:
              appName: ${{ parameters.appName }}
              envName: 'Production'
              appServiceName: $(AppServiceName)